###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           24/Mar/2017  13:21:50
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  regvar
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  E:\_ARTON_PROJ\Arton-DL1-R\BP\soft\git\hardware.c
#    Command line  =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BP\soft\git\hardware.c -lcN
#        E:\_ARTON_PROJ\Arton-DL1-R\BP\soft\git\IAR\Debug\List -o
#        E:\_ARTON_PROJ\Arton-DL1-R\BP\soft\git\IAR\Debug\Obj --debug
#        -D__MSP430G2433__ -e --double=32 --regvar_r4 --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430fn.h"
#        -I ..\ -I .\ -Oh
#    List file     =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BP\soft\git\IAR\Debug\List\hardware.lst
#    Object file   =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BP\soft\git\IAR\Debug\Obj\hardware.r43
#
###############################################################################

E:\_ARTON_PROJ\Arton-DL1-R\BP\soft\git\hardware.c
      1          /**********************************************************************************
      2           *
      3           *      Hardware routines
      4           *
      5           **********************************************************************************
      6           * FileName:        hardware.c
      7           * Version:			1.00
      8           *
      9           * Processor:       MSP430G2xxx
     10           * Complier:        IAR Workbench for MSP430 v4.50 or higher
     11           *                  
     12           * Company:         ARTON
     13           *
     14           *
     15           * Author               Date      	Version	  		Comment
     16           *-------------------------------------------------------------------------------
     17           * Oleg Semeniuk	 16.11.2013    	1.00		Release for v1.00
     18           *
     19          
     20           *********************************************************************************/
     21          /*********************************************************************************/
     22          /*                                 INCLUDES                                      */
     23          /*********************************************************************************/
     24          #include  "hardware.h"
     25          #include  "main.h"
     26          #include  "delay.h"
     27          /*********************************************************************************/
     28          /*                                 VARIABLES                                     */
     29          /*********************************************************************************/
     30          	 
     31          extern __regvar __no_init tFlags 	f 	 @ __R4; 
     32          
     33          static u8 i, strob, but;
     34          
     35          
     36          /*********************************************************************************/
     37          /*                                FUNCTIONS                                      */
     38          /*********************************************************************************/
     39          
     40          
     41          
     42          //--------------------------------------------------------------------------------
     43          // Function		: __interrupt void PORT1_ISR(void)
     44          // Parameters	: None
     45          // Return		: None
     46          // Description	: GPIO Interrupt routine for Soft UART & Button Press 
     47          //--------------------------------------------------------------------------------
     48          #pragma vector=PORT1_VECTOR
     49          __interrupt void PORT1_ISR(void) {   
     50          	/*
     51          	if (BUT_IFG & BUT_BIT) {
     52          		//BUT_IFG &= ~BUT_BIT;    		// Обнуляем флаг прерывания
     53                  //
     54          		if (BUT_IES & BUT_BIT) {		// Спадающий фронт
     55          			but = 1;
     56          			for (i = 0; i < 8; i++) {
     57          				if (BUT_IN & BUT_BIT) {
     58          					but = 0;
     59          					break;
     60          				}
     61          				DelayUs(200);
     62          			}
     63          			if (but == 1) {
     64          				BUT_IES &= ~BUT_BIT;
     65          				fButtonDownOn = 1;
     66          			}
     67          		}else{
     68          			but = 1;
     69          			for (i = 0; i < 4; i++) {
     70          				if ((BUT_IN & BUT_BIT) == 0) {
     71          					but = 0;
     72          					break;
     73          				}
     74          				DelayUs(100);
     75          			}
     76          			if (but == 1) {
     77          				BUT_IES |= BUT_BIT;
     78          				fButtonUpOn = 1;
     79          			}
     80          		}
     81          		//
     82          		BUT_IFG &= ~BUT_BIT;    		// Обнуляем флаг прерывания
     83          		//
     84          		__bic_SR_register_on_exit(LPM3_bits);               // Clear LPM3 bits from 0(SR) Просыпаемся
     85          	}
     86          */
     87          }
     88          
     89          
     90          //--------------------------------------------------------------------------------
     91          // Function		: __interrupt void PORT2_ISR(void)
     92          // Parameters	: None
     93          // Return		: None
     94          // Description	: GPIO Interrupt routine for RF Button Press 
     95          //--------------------------------------------------------------------------------
     96          #pragma vector=PORT2_VECTOR
     97          __interrupt void PORT2_ISR(void) {   
     98          	
     99          	//
    100          	if ((INTER_IE & INTER_BIT) && (INTER_IFG & INTER_BIT)) {
    101          		INTER_IFG &= ~INTER_BIT;    			// Обнуляем флаг прерывания
    102                  //
    103          		BCSCTL1 = CALBC1_8MHZ; 					// Используем частоту 8 MГц
    104          		DCOCTL =  CALDCO_8MHZ;
    105          		//
    106          		fRxLineDownOn = 1;
    107          		//
    108          		//__bic_SR_register_on_exit(LPM3_bits);   // Clear LPM3 bits from 0(SR) Просыпаемся
    109          		
    110          	}
    111          	//
    112          	if ((STROB_IE & STROB_BIT) && (STROB_IFG & STROB_BIT)) {
    113          		//
    114          		strob = 1;
    115          		for (i = 0; i < 4; i++) {
    116          			if ((STROB_IN & STROB_BIT) == 0) {
    117          				strob = 0;
    118          				break;
    119          			}
    120          			//DelayUs(1);
    121          		}
    122          		
    123          		if (strob) {
    124          			fStartPulse = strob;					// Set flag
    125          			STROB_IE_Disable();
    126          		}else{
    127          			fStartPulse = strob;					// Set flag
    128          		}
    129          			
    130          		STROB_IFG &= ~STROB_BIT;    		// Clear ISR flag
    131          			
    132          		__bic_SR_register_on_exit(LPM3_bits);   // Clear LPM3 bits from 0(SR) Просыпаемся
    133          	}
    134          
    135          	//
    136          	if (BUT_IFG & BUT_BIT) {
    137          			//BUT_IFG &= ~BUT_BIT;    		// Обнуляем флаг прерывания
    138          					//
    139          			if (BUT_IES & BUT_BIT) {		// Спадающий фронт
    140          				but = 1;
    141          				for (i = 0; i < 8; i++) {
    142          					if (BUT_IN & BUT_BIT) {
    143          						but = 0;
    144          						break;
    145          					}
    146          					DelayUs(200);
    147          				}
    148          				if (but == 1) {
    149          					BUT_IES &= ~BUT_BIT;
    150          					fButtonDownOn = 1;
    151          				}
    152          			}else{
    153          				but = 1;
    154          				for (i = 0; i < 4; i++) {
    155          					if ((BUT_IN & BUT_BIT) == 0) {
    156          						but = 0;
    157          						break;
    158          					}
    159          					DelayUs(100);
    160          				}
    161          				if (but == 1) {
    162          					BUT_IES |= BUT_BIT;
    163          					fButtonUpOn = 1;
    164          				}
    165          			}
    166          			//
    167          			BUT_IFG &= ~BUT_BIT;    		// Обнуляем флаг прерывания
    168          			//
    169          			__bic_SR_register_on_exit(LPM3_bits);               // Clear LPM3 bits from 0(SR) Просыпаемся
    170          	}
    171          }
    172          
    173          
    174          //--------------------------------------------------------------------------------
    175          // Function		: void STROB_IE_Enable(void)
    176          // Parameters	: None
    177          // Return		: None
    178          // Description	: GPIO Interrupt routine for RF Button Press 
    179          //--------------------------------------------------------------------------------
    180          void STROB_IE_Enable(void) {   
    181          	_BIC_SR(GIE);    					// Disable interrupts
    182          	//
    183          	STROB_IFG &= ~STROB_BIT;    		// Clear ISR flag
    184          	STROB_IE |=   STROB_BIT;
    185          
    186          	//fStartPulse = 0;					// Clear app flag
    187          	
    188          	_BIS_SR(GIE);    					// Enanble interrupts
    189          	
    190          }
    191          
    192          
    193          //--------------------------------------------------------------------------------
    194          // Function		: void STROB_IE_Enable(void)
    195          // Parameters	: None
    196          // Return		: None
    197          // Description	: GPIO Interrupt routine for RF Button Press 
    198          //--------------------------------------------------------------------------------
    199          void STROB_IE_Disable(void) {   
    200          	//
    201          	STROB_IE &= ~ STROB_BIT;
    202          	
    203          }
    204          
    205          
    206          
    207          //---------------------------------------------------------------------------------
    208          // Function		: void TEST_BUT_INT_Init(void)
    209          // Parameters	: None
    210          // Return		: None
    211          // Description	: Initialization interrupts from TEST Button
    212          //---------------------------------------------------------------------------------
    213          void BUT_INT_Init(void) {
    214          	//
    215          	BUT_REN |= BUT_BIT; 		// PULL enable
    216          	BUT_OUT |= BUT_BIT;			// PULLUP Resistor 
    217          	
    218          	BUT_DIR &= ~BUT_BIT;
    219          	BUT_IES |= BUT_BIT;  		// прерывание по переходу из 1 в 0, 
    220                          				// устанавливается соответствующим битом IES.x = 1.
    221          	BUT_IFG &= ~BUT_BIT; 		// Для предотвращения немедленного срабатывания прерывания,
    222                          				// обнуляем его флаг для P1.3 до разрешения прерываний
    223          	BUT_IE  |= BUT_BIT;   		// Разрешаем прерывания для P1.3
    224          }
    225          
    226          
    227          //---------------------------------------------------------------------------------
    228          // Function		: void INTER_INT_Init(void)
    229          // Parameters	: None
    230          // Return		: None
    231          // Description	: Initialization interrupts from Intercom (Soft UART)
    232          //---------------------------------------------------------------------------------
    233          void INTER_INT_Init(void) {
    234          	//
    235          	INTER_REN |= INTER_BIT; 		// PULL enable
    236          	INTER_OUT |= INTER_BIT;			// PULLUP Resistor 
    237          	
    238          	INTER_DIR &= ~INTER_BIT;
    239          	INTER_IES |= INTER_BIT;  		// прерывание по переходу из 1 в 0, 
    240                          					// устанавливается соответствующим битом IES.x = 1.
    241          	INTER_IFG &= ~INTER_BIT; 		// Для предотвращения немедленного срабатывания прерывания,
    242                          					// обнуляем его флаг для P1.3 до разрешения прерываний
    243          	INTER_IE  |= INTER_BIT;   		// Разрешаем прерывания для P1.3
    244          }
    245          
    246          
    247          
    248          //---------------------------------------------------------------------------------
    249          // Function		: void SNIFF_IRQ_INT_Init(void)
    250          // Parameters	: None
    251          // Return		: None
    252          // Description	: Initialization interrupts from RX Sniff CC112x (GPIO2)
    253          //---------------------------------------------------------------------------------
    254          void STROB_IRQ_Init(void) {
    255          	//
    256          	//STROB_REN |= STROB_BIT; 		// PULL enable
    257          	//STROB_OUT &= ~STROB_BIT;		// PULLDOWN Resistor 
    258          			
    259          	STROB_DIR &= ~STROB_BIT;		
    260          	STROB_IES &= ~STROB_BIT;  		// прерывание по переходу из 0 в 1, 
    261          
    262          	STROB_IFG &= ~STROB_BIT; 		// Для предотвращения немедленного срабатывания прерывания,
    263          	//STROB_IE  |= STROB_BIT;   		// Разрешаем прерывания
    264          	STROB_IE_Disable();
    265          }
    266          
    267          
    268          
    269          //---------------------------------------------------------------------------------
    270          // Function		: void AMP_SetGain(u8 value)
    271          // Parameters	: None
    272          // Return		: None
    273          // Description	: Initialization interrupts from RX Sniff CC112x (GPIO2)
    274          //---------------------------------------------------------------------------------
    275          void AMP_SetGain(u8 value) {
    276          	
    277          	GAIN_1_CLR();
    278          	GAIN_2_CLR();
    279          	
    280          	if (value & 1) GAIN_1_SET();
    281          	if (value & 2) GAIN_2_SET();
    282          	
    283          	/*
    284          	GAIN_1_OUT &= ~(GAIN_1_BIT | GAIN_2_BIT);
    285          	
    286          	bits =  (value & 1) ? GAIN_1_BIT : 0;
    287          	bits |= (value & 2) ? GAIN_2_BIT : 0;
    288          	
    289          	GAIN_1_OUT |= bits;
    290          	*/
    291          }
    292          
    293          
    294          //---------------------------------------------------------------------------------
    295          // Function		: void GPIO_Init(void)
    296          // Parameters	: None
    297          // Return		: None
    298          // Description	: Initialization GPIO 
    299          //---------------------------------------------------------------------------------
    300          void GPIO_Init(void) {
    301          
    302          	P1OUT = 0;	
    303          	P2OUT = 0;
    304          	
    305          	P1DIR = 0;
    306          	P2DIR = 0;
    307          	
    308          	AMP_PWR_DIR 	|= AMP_PWR_BIT;
    309          	VREF_DIR		|= VREF_BIT;
    310          	RED_DIR 		|= RED_BIT;
    311          	YEL_DIR 		|= YEL_BIT;
    312          	FIRE_DIR 		|= FIRE_BIT;
    313          	FAULT_DIR 		|= FAULT_BIT;
    314          	BREAK_DIR 		|= BREAK_BIT;
    315          	VREF_DIR 		|= VREF_BIT;
    316          	
    317          	VREF_OUT 		|= VREF_BIT;
    318          
    319          	GAIN_1_DIR 		|= GAIN_1_BIT;
    320          	GAIN_2_DIR 		|= GAIN_2_BIT;
    321          	
    322          	P1SEL = 0;
    323          	P2SEL = 0;
    324          	
    325          	BUT_INT_Init();			// Init interrupts from TEST button 
    326          	INTER_INT_Init();				// Init interrupts from Intercom
    327          	STROB_IRQ_Init();
    328          }
    329          
    330          // End hardware.c

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   AMP_SetGain
      2   BUT_INT_Init
      2   GPIO_Init
        2   -> BUT_INT_Init
        2   -> INTER_INT_Init
      2   INTER_INT_Init
      4   PORT1_ISR
     12   PORT2_ISR
       12   -> DelayUs
      2   STROB_IE_Disable
      2   STROB_IE_Enable
      0   STROB_IRQ_Init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine1_0
      12  ?Subroutine0
      26  AMP_SetGain
       1  BCSCTL1
      26  BUT_INT_Init
       1  CALBC1_8MHZ
       1  CALDCO_8MHZ
       1  DCOCTL
      94  GPIO_Init
      38  INTER_INT_Init
       1  P1DIR
       1  P1OUT
       1  P1SEL
       1  P2DIR
       1  P2IE
       1  P2IES
       1  P2IFG
       1  P2IN
       1  P2OUT
       1  P2REN
       1  P2SEL
       2  PORT1_ISR
       2  PORT1_ISR::??INTVEC 4
     246  PORT2_ISR
       2  PORT2_ISR::??INTVEC 6
       2  STROB_IE_Disable
      14  STROB_IE_Enable
       0  STROB_IRQ_Init
       1  but
       1  i
       1  strob

 
 466 bytes in segment CODE
  15 bytes in segment DATA16_AN
   3 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 
 466 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
   3 bytes of DATA  memory (+ 15 bytes shared)

Errors: none
Warnings: none
